{"version":3,"sources":["Utils.js","App.js","serviceWorker.js","index.js"],"names":["http","require","App","useState","trade","setTrade","total","setTotal","countryData","setCountryData","ccyPairData","setCcyPairData","useEffect","socket","sock","SockJS","onopen","subscribe","onmessage","e","close","onclose","initWebSocket","stompClient","Stomp","over","connect","frame","summary","value","obj","JSON","parse","body","labels","values","Object","entries","key","push","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","prepareCountryData","handleCountryData","prepareCcyPairData","handleCcyPairData","className","rows","cols","name","form","onChange","target","onClick","message","options","hostname","port","path","method","headers","length","req","request","res","on","d","error","alert","write","end","postTradeMessage","stringify","Boolean","window","location","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b957e29c.chunk.js","sourcesContent":["import SockJS from \"sockjs-client\"\n\nconst http = require('http')\n\nconst SERVER_HOST = 'localhost'\nconst SERVER_PORT = 8080\nconst WS_ENDPOINT = '/ws'\nconst TRADE_ENDPOINT = '/api/trade'\n\nexport const prepareCountryData = (labels, values) => {\n  return {\n    labels: labels,\n    datasets: [\n      {\n        label: 'No. of Trades',\n        backgroundColor: '#36A2EB',\n        borderColor: '#36A2EB',\n        borderWidth: 1,\n        hoverBackgroundColor: '#36A2EB',\n        hoverBorderColor: '#36A2EB',\n        data: values\n      }\n    ]\n  }\n}\n\nexport const prepareCcyPairData = (labels, values) => {\n  return {\n    labels: labels,\n    datasets: [\n      {\n        label: 'No. of Trades',\n        backgroundColor: '#FFCE56',\n        borderColor: '#FFCE56',\n        borderWidth: 1,\n        hoverBackgroundColor: '#FFCE56',\n        hoverBorderColor: '#FFCE56',\n        data: values\n      }\n    ]\n  }\n}\n\nexport const initWebSocket = () => {\n  let sock = new SockJS(`http://${SERVER_HOST}:${SERVER_PORT}${WS_ENDPOINT}`);\n\n  sock.onopen = function () {\n    sock.subscribe()\n  }\n\n  sock.onmessage = function (e) {\n    sock.close();\n  }\n\n  sock.onclose = function () {}\n  return sock\n}\n\nexport const postTradeMessage = (message) => {\n  const options = {\n    hostname: SERVER_HOST,\n    port: SERVER_PORT,\n    path: TRADE_ENDPOINT,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Content-Length': message.length\n    }\n  }\n\n  const req = http.request(options, (res) => {\n    res.on('data', (d) => {\n    })\n  })\n\n  req.on('error', (error) => {\n    alert(\"post trade error \" + error)\n  })\n\n  req.write(message)\n  req.end()\n\n}\n","import React from 'react'\nimport {useEffect, useState} from 'react'\nimport './App.css'\nimport {HorizontalBar} from 'react-chartjs-2'\nimport Stomp from 'stompjs'\nimport {prepareCountryData, prepareCcyPairData, initWebSocket, postTradeMessage} from './Utils'\n\nfunction App() {\n  const [trade, setTrade] = useState(\"\")\n  const [total, setTotal] = useState(0)\n  const [countryData, setCountryData] = useState({})\n  const [ccyPairData, setCcyPairData] = useState({})\n\n  const handleTotal = (value) => {\n    setTotal(value)\n  }\n\n  const handleCountryData = (obj) => {\n    let labels = [], values = []\n    for (const [key, value] of Object.entries(obj)) {\n      labels.push(key)\n      values.push(value)\n    }\n    values.push(0)\n    setCountryData(prepareCountryData(labels, values))\n  }\n\n  const handleCcyPairData = (obj) => {\n    let labels = [], values = []\n    for (const [key, value] of Object.entries(obj)) {\n      labels.push(key)\n      values.push(value)\n    }\n    values.push(0)\n    setCcyPairData(prepareCcyPairData(labels, values))\n  }\n\n  const submitTrade = () => {\n    try {\n      let data = JSON.stringify(JSON.parse(trade))\n      postTradeMessage(data)\n    } catch (e) {\n      alert(\"submit trade error \" + e)\n    }\n  }\n\n  useEffect(() => {\n    let socket = initWebSocket()\n    let stompClient = Stomp.over(socket)\n    stompClient.connect({}, function (frame) {\n      stompClient.subscribe('/topic/summary', function (summary) {\n        let obj = JSON.parse(summary.body)\n        handleTotal(obj['total'])\n        handleCountryData(obj['tradesByCountry'])\n        handleCcyPairData(obj['tradesByCcyPair'])\n      });\n    });\n\n  }, [])\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"container\">\n\n        <div className=\"trade-form\">\n          <textarea rows=\"6\" cols=\"80\" name=\"trade\" form=\"tradeform\" onChange={e => setTrade(e.target.value)}>\n          </textarea>\n          <button onClick={submitTrade}>Submit Trade Message</button>\n        </div>\n\n        <hr/>\n        <h2>Total Number of Trades</h2>\n        <label className=\"label\">{total}</label>\n\n        <hr/>\n        <h2>Number of Trades by Originating Country</h2>\n        {countryData &&\n        <HorizontalBar data={countryData}/>\n        }\n\n        <hr/>\n        <h2>Number of Trades by Currency Pair</h2>\n        {ccyPairData &&\n        <HorizontalBar data={ccyPairData}/>\n        }\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}